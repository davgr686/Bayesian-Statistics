hist(post)
plot(k, post)
posterior <- function(k) {
return prod(exp(k * cos(Y - u))/(2 * pi * besselI(k, 0)) * dexp(k))
}
posterior <- function(k) {
return prod(exp(k * cos(Y - u))/(2 * pi * besselI(k, 0)) * dexp(k))
}
posterior <- function(k) {
return prod(exp(k * cos(Y - u))/(2 * pi * besselI(k, 0))) * dexp(k))
}
posterior <- function(k) {
return (prod(exp(k * cos(Y - u))/(2 * pi * besselI(k, 0))) * dexp(k))
}
post <- sapply(k, posterior)
plot(k, post)
hist(post)
plot(k, post)
grid()
plot(k, post)
k <- seq(0.001,20,0.01)
posterior <- function(k) {
return (prod(exp(k * cos(Y - u))/(2 * pi * besselI(k, 0))) * dexp(k))
}
post <- sapply(k, posterior)
plot(k, post)
k <- seq(0.001,20,0.1)
posterior <- function(k) {
return (prod(exp(k * cos(Y - u))/(2 * pi * besselI(k, 0))) * dexp(k))
}
post <- sapply(k, posterior)
plot(k, post)
k <- seq(0.001,10,0.1)
posterior <- function(k) {
return (prod(exp(k * cos(Y - u))/(2 * pi * besselI(k, 0))) * dexp(k))
}
post <- sapply(k, posterior)
plot(k, post, type='l')
post
plot(density(post))
plot(k, post, type='l')
plot(density(post))
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
m <- getmode(v)
m <- getmode(post)
abline(h=m)
abline(v=m)
plot(k, post, type='l')
abline(v=m)
plot(k, post, type='l')
abline(v=2.1)
plot(k, post, type='l')
abline(v=2.15)
y <- c(44, 25, 45, 52, 30, 63, 19, 50, 34, 67)
n <- 10
tau2 = sum((log(y)-3.7)^2)/n
## inv chisq(n, df) / (df * scale)
X <- 1/rchisq(10000, n)
sig2_posterior  = X / (n * tau2)
hist(sig2_posterior, 100, xlim = c(0,0.8))
G <- 2 * pnorm(sqrt(sig2_posterior)/sqrt(2), 0, 1) - 1
CI = quantile(G,probs=c(0.05,0.95))
h <- hist(G, breaks=100, plot=FALSE)
cuts <- cut(h$breaks, c(-Inf,CI[1],CI[2],Inf))
plot(h, col=c("white","green","white")[cuts])
abline(v=CI[1], col="green")
abline(v=CI[2], col="green")
kdens <- density(G)
sorted_kdens <- sort(kdens$y, index.return=TRUE, decreasing = TRUE)
target_dens <- sum(sorted_kdens$x) * 0.9
sum = 0
for (i in 1:length(sorted_kdens$x))
{
sum = sum + sorted_kdens$x[i]
if (sum > target_dens) {
#breakpoint = kdens$y[sorted_kdens$ix[i]]
breakpoint1 = kdens$y[sorted_kdens$ix[i-1]]
break
}
}
plot(kdens)
abline(h=breakpoint1)
hist(sig2_posterior, 100, xlim = c(0,0.8))
## inv chisq(n, df) / (df * scale)
X <- 1/rchisq(10000, n-1)
sig2_posterior  = X / (n-1 * tau2)
hist(sig2_posterior, 100, xlim = c(0,0.8))
sig2_posterior  = n-1 * tau2 /rchisq(10000, n-1)
sig2_posterior  = (n-1) * tau2 /rchisq(10000, n-1)
hist(sig2_posterior, 100, xlim = c(0,0.8))
hist(sig2_posterior, 200, xlim = c(0,0.8))
hist(sig2_posterior, 200, xlim = c(0,1))
samples <- rnorm(10000, 2, 1)
plot(samples)
plot(density(samples))
samples <- rnorm(10, 2, 1)
plot(density(samples))
samples
grid <- seq(-1, 5, 0.1)
?rnorm
ps <- pnorm(grid, 2, 1)
plot(ps)
plot(density(ps))
lines(density(samples))
plot(density(samples))
plot(density(ps))
samples <- rnorm(1000, 2, 1)
plot(density(samples))
grid <- seq(-1, 6, 0.01)
ps <- pnorm(grid, 2, 1)
plot(density(ps))
?pnorm
ps <- dnorm(grid, 2, 1)
plot(density(ps))
ps <- qnorm(grid, 2, 1)
ps <- dnorm(grid, 2, 1)
plot(density(ps))
plot(ps)
hist(ps)
plot(density(ps))
plot(density(samples))
grid <- seq(-3, 6, 0.01)
ps <- dnorm(grid, 2, 1)
plot(density(ps))
ps <- pnorm(grid, 2, 1)
plot(density(ps))
plot(grid, ps)
ps <- qnorm(grid, 2, 1)
ps <- dnorm(grid, 2, 1)
plot(grid, ps)
samples <- rnorm(1000, 2, 1)
plot(density(samples))
grid <- seq(-3, 6, 0.01)
ps <- dnorm(grid, 2, 1)
plot(grid, ps)
samples <- rnorm(1000, 2, 1)
plot(density(samples))
grid <- seq(-3, 6, 0.01)
ps <- dnorm(grid, 2, 1)
plot(grid, ps)
lines(density(samples))
plot(grid, ps, type='l')
lines(density(samples, col="red"))
lines(density(samples), col='red')
plot(grid, ps, type='l', col="green")
lines(density(samples), col='red')
samples <- rnorm(100, 2, 1)
plot(density(samples))
grid <- seq(-3, 6, 0.01)
ps <- dnorm(grid, 2, 1)
grid <- seq(-1, 6, 0.01)
ps <- dnorm(grid, 2, 1)
plot(grid, ps, type='l', col="green")
lines(density(samples), col='red')
samples <- rnorm(100, 2, 1)
plot(density(samples))
grid <- seq(-1, 6, 0.01)
ps <- dnorm(grid, 2, 1)
plot(grid, ps, type='l', col="green")
lines(density(samples), col='red')
samples <- rnorm(1000, 2, 1)
plot(density(samples))
samples <- rnorm(10000, 2, 1)
plot(density(samples))
plot(grid, ps, type='l', col="green")
lines(density(samples), col='red')
plot(grid, ps, type='l', col="green")
lines(density(samples), col='red')
s <- 5
n <- 20
f <- n - s
a0 <- 2
b0 <- 2
posterior <- rbeta(100000, a0 + s, b0 + f)
means <- c()
vars <- c()
indx <- 0
for (i in seq(1,10000, 10))
{
post <- sample( posterior, i, replace=TRUE )
means[indx] <- mean(post)
vars[indx] <- sd(post)
indx <- indx + 1
}
truemean <- (a0 + s) / (a0 + s + b0 + f)
truevar <- (a0 + s) * (b0 + f) / ((b0 + f + a0 + s)**2 * (b0 + f + a0 + s + 1))
plot(means, type="l")
plot(vars**2, type="l")
plot(means, type="l")
abline(h=truemean)
abline(h=truemean, col = 'red')
for (i in seq(1,10000, 100))
{
post <- sample( posterior, i, replace=TRUE )
means[indx] <- mean(post)
vars[indx] <- sd(post)
indx <- indx + 1
}
truemean <- (a0 + s) / (a0 + s + b0 + f)
truevar <- (a0 + s) * (b0 + f) / ((b0 + f + a0 + s)**2 * (b0 + f + a0 + s + 1))
plot(means, type="l")
abline(h=truemean, col = 'red')
for (i in seq(1,10000, 100))
{
post <- sample( posterior, i, replace=TRUE )
means[indx] <- mean(post)
vars[indx] <- sd(post)
indx <- indx + 1
}
truemean <- (a0 + s) / (a0 + s + b0 + f)
truevar <- (a0 + s) * (b0 + f) / ((b0 + f + a0 + s)**2 * (b0 + f + a0 + s + 1))
plot(means, type="l")
abline(h=truemean, col = 'red')
s <- 5
n <- 20
f <- n - s
a0 <- 2
b0 <- 2
posterior <- rbeta(100000, a0 + s, b0 + f)
means <- c()
vars <- c()
indx <- 0
for (i in seq(1,10000, 100))
{
post <- sample( posterior, i, replace=TRUE )
means[indx] <- mean(post)
vars[indx] <- sd(post)
indx <- indx + 1
}
truemean <- (a0 + s) / (a0 + s + b0 + f)
truevar <- (a0 + s) * (b0 + f) / ((b0 + f + a0 + s)**2 * (b0 + f + a0 + s + 1))
plot(means, type="l")
abline(h=truemean, col = 'red')
plot(vars**2, type="l")
abline(h=truevar, col = 'red')
s <- 5
n <- 20
f <- n - s
a0 <- 2
b0 <- 2
posterior <- rbeta(100000, a0 + s, b0 + f)
means <- c()
vars <- c()
indx <- 0
for (i in seq(1,100000, 100))
{
post <- sample( posterior, i, replace=TRUE )
means[indx] <- mean(post)
vars[indx] <- sd(post)
indx <- indx + 1
}
truemean <- (a0 + s) / (a0 + s + b0 + f)
truevar <- (a0 + s) * (b0 + f) / ((b0 + f + a0 + s)**2 * (b0 + f + a0 + s + 1))
plot(means, type="l")
abline(h=truemean, col = 'red')
plot(vars**2, type="l")
abline(h=truevar, col = 'red')
?plot
length(post)
s <- 5
n <- 20
f <- n - s
a0 <- 2
b0 <- 2
set.seed(12345)
posterior <- rbeta(100000, a0 + s, b0 + f)
means <- c()
vars <- c()
indx <- 0
for (i in seq(1,100000, 100))
{
post <- sample( posterior, i, replace=TRUE )
means[indx] <- mean(post)
vars[indx] <- sd(post)
indx <- indx + 1
}
truemean <- (a0 + s) / (a0 + s + b0 + f)
truevar <- (a0 + s) * (b0 + f) / ((b0 + f + a0 + s)**2 * (b0 + f + a0 + s + 1))
plot(means, type="l")
abline(h=truemean, col = 'red')
plot(vars**2, type="l")
abline(h=truevar, col = 'red')
## B
post <- sample( posterior, 10000, replace=TRUE )
sum(post > 0.3) / 10000
sum(post > 0.3) / length(post)
prob_theta_bigger_than_03 <- pbeta(0.3, a0 + s, b0 + f, lower.tail = FALSE)
prob_theta_bigger_than_03
phis <- density(log(post/(1-post)))
plot(phis)
hist(phis)
hist(phis$y)
hist(phis$y, 100)
hist(phis$x, 100)
plot(phis)
hist(log(post/(1-post), freq=FALSE)
log(post/(1-post)
log(post/(1-post)
hist(log(post/(1-post)), freq=FALSE)
hist(log(post/(1-post)), freq=FALSE)
hist(log(post/(1-post)))
, freq=FALSE
hist(log(post/(1-post)), freq=FALSE)
plot(phis)
?plot
Y <- c(-2.44,2.14,2.54,1.83,2.02,2.33,-2.79,2.23,2.07,2.02)
u <- 2.39
k <- seq(0.001,10,0.1)
posterior <- function(k) {
return (prod(exp(k * cos(Y - u))/(2 * pi * besselI(k, 0))) * dexp(k))
}
post <- sapply(k, posterior)
plot(k, post, type='l')
abline(v=2.15)
post
lines(dexp(k))
plot(k, post, type='l')
abline(v=2.15)
lines(dexp(k))
lines(k, dexp(k))
plot(k, post, type='l')
lines(k, dexp(k))
lines(k, dexp(k)/sum(dexp(k)*0.1))
plot(k, post, type='l')
lines(k, dexp(k)/sum(dexp(k)*0.1))
plot(k, dexp(k)/sum(dexp(k)*0.1))
plot(k, post, type='l')
plot(k, post, type='l', ylim = c(0,1))
plot(k, dexp(k)/sum(dexp(k)*0.1))
plot(k, post, type='l', ylim = c(0,0.1))
Y <- c(-2.44,2.14,2.54,1.83,2.02,2.33,-2.79,2.23,2.07,2.02)
u <- 2.39
k <- seq(0.001,10,0.1)
posterior <- function(k) {
return (prod(exp(k * cos(Y - u))/(2 * pi * besselI(k, 0))) * dexp(k))
}
post <- sapply(k, posterior)
plot(k, post, type='l', ylim = c(0,0.1))
abline(v=2.15)
plot(k, post, type='l', ylim = c(0,0.1))
plot(k, post, type='l', ylim = c(0,0.01))
plot(k, post/sum(post)*0.1, type='l')
plot(k, dexp(k)/sum(dexp(k)*0.1))
plot(k, post/sum(post)*0.1, type='l')
lines(k, dexp(k)/sum(dexp(k)*0.1))
lines(k, dexp(k, 1)/sum(dexp(k)*0.1))
plot(k, post/sum(post)*0.1, type='l')
lines(k, dexp(k, 1)/sum(dexp(k)*0.1))
plot(k, post/sum(post)*0.1, type='l')
lines(k, dexp(k)/sum(dexp(k)*0.1))
plot(k, post, type='l')
dexp(1)
dexp(c(1,2,3,4,5))
dexp(k)
lines(k, dexp(k))
plot(k, post, type='l', ylim = c(0,10))
lines(k, dexp(k))
plot(k, post, type='l')
lines(k, dexp(k))
plot(k, post, type='l', ylim=c(0,1))
lines(k, dexp(k))
prior <- function(k) {
return (dexp(k))
}
prior <- sapply(k)
prior <- sapply(k, prior)
lines(k, prior)
plot(k, post, type='l', ylim=c(0,1))
lines(k, prior)
plot(k, post, type='l')
lines(k, prior)
likeli <- sapply(k, function (k) {prod(exp(k * cos(Y - 2.39))/(2 * pi * besselI(k, 0)))})
lines(k, likeli)
plot(k, post, type='l', ylim=c(0,1))
lines(k, likeli)
plot(k, post, type='l', ylim=c(0,0.1))
lines(k, likeli)
plot(k, post, type='l', ylim=c(0,0.01))
lines(k, likeli)
plot(k, post, type='l', ylim=c(0,0.0001))
plot(k, post, type='l', ylim=c(0,0.000001))
plot(k, post, type='l', ylim=c(0,0.00001))
lines(k, likeli)
plot(k, post, type='l', ylim=c(0,0.0001))
lines(k, likeli)
lines(k, prior)
Y <- c(-2.44,2.14,2.54,1.83,2.02,2.33,-2.79,2.23,2.07,2.02)
u <- 2.39
k <- seq(0.001,10,0.1)
posterior <- function(k) {
return (prod(exp(k * cos(Y - u))/(2 * pi * besselI(k, 0))) * dexp(k))
}
post <- sapply(k, posterior)
plot(k, post, type='l', ylim=c(0,0.0001))
plot(k, post, type='l')
abline(v=2.15)
# a)
# Input: y-vector, one kapa value, my
# Output: vonMises probability of input. Returns a scalar
likelihoodVonMises <- function(y, k, my) {
return(prod(exp(k*cos(y-my))/(2*pi*besselI(k, nu=0))))
}
y.values <- c(-2.44, 2.14, 2.54, 1.83, 2.02, 2.33, -2.79, 2.23, 2.07, 2.02)
kapa.values <- seq(0, 10, 0.01)
my <- 2.39
# Vector of prior values, given kapas
kapa.prior <- dexp(kapa.values)
# Calculate likelihood for each kapa, given y-vector
likelihoods = numeric()
i = 1
for(k in kapa.values) {
likelihoods[i] = likelihoodVonMises(y.values, k, my)
i = i + 1
}
posterior = likelihoods * kapa.prior # Vector of posterior values
plot(kapa.values, posterior, type='l') # Plot
# b)
max.posterior = which.max(posterior) # Find maximum posterior value
kapa.max.posterior = kapa.values[max.posterior] # Find maximum kapa value given max value in posterior
Y <- c(-2.44,2.14,2.54,1.83,2.02,2.33,-2.79,2.23,2.07,2.02)
u <- 2.39
k <- seq(0.001,10,0.1)
posterior <- function(k) {
return (prod(exp(k * cos(Y - u))/(2 * pi * besselI(k, 0))) * dexp(k))
}
post <- sapply(k, posterior)
plot(k, post, type='l')
abline(v=2.15)
plot(dexp(k))
plot(k, post, type='l')
plot(k, dexp(k))
plot(k, post, type='l')
plot(k, dexp(k))
plot(k, post, type='l')
plot(k, dexp(k))
plot(k, prod(exp(k * cos(Y - u))/(2 * pi * besselI(k, 0))))
prod(exp(k * cos(Y - u))/(2 * pi * besselI(k, 0)))
like <- function(k) {
return (prod(exp(k * cos(c(-2.44,2.14,2.54,1.83,2.02,2.33,-2.79,2.23,2.07,2.02) - 2.39))/(2 * pi * besselI(k, 0))) * dexp(k))
}
like <- function(k) {
return (prod(exp(k * cos(c(-2.44,2.14,2.54,1.83,2.02,2.33,-2.79,2.23,2.07,2.02) - 2.39))/(2 * pi * besselI(k, 0))) )
}
likeli <- sapply(k, like)
plot(k, likeli)
plot(k, post, type='l')
plot(k, likeli)
plot(k, post, type='l')
plot(k, likeli)
plot(k, post, type='l')
line(k, likeli)
plot(k, post, type='l')
lines(k, likeli)
plot(k, dexp(k))
lines(k, likeli)
plot(k, post, type='l')
abline(v=2.15)
# a
set.seed(12345)
Y <- c(-2.44,2.14,2.54,1.83,2.02,2.33,-2.79,2.23,2.07,2.02)
u <- 2.39
k <- seq(0.001,10,0.1)
posterior <- function(k) {
return (prod(exp(k * cos(Y - u))/(2 * pi * besselI(k, 0))) * dexp(k))
}
post <- sapply(k, posterior)
plot(k, post, type='l')
abline(v=2.15)
abline(v=2.15, col="red")
posterior <- function(k) {
return (prod(exp(k * cos(Y - u))/(2 * pi * besselI(k, 0))) * dexp(-k))
}
post <- sapply(k, posterior)
plot(k, post, type='l')
posterior <- function(k) {
return (prod(exp(k * cos(Y - u))/(2 * pi * besselI(k, 0))) * dexp(k))
}
post <- sapply(k, posterior)
plot(k, post, type='l')
abline(v=2.15, col="red")
?prod
y <- c(44, 25, 45, 52, 30, 63, 19, 50, 34, 67)
n <- 10
tau2 = sum((log(y)-3.7)^2)/n
sig2_posterior  = (n-1) * tau2 /rchisq(10000, n-1)
hist(sig2_posterior, 200, xlim = c(0,1))
G <- 2 * pnorm(sqrt(sig2_posterior)/sqrt(2), 0, 1) - 1
CI = quantile(G,probs=c(0.05,0.95))
h <- hist(G, breaks=100, plot=FALSE)
cuts <- cut(h$breaks, c(-Inf,CI[1],CI[2],Inf))
plot(h, col=c("white","green","white")[cuts])
abline(v=CI[1], col="green")
abline(v=CI[2], col="green")
kdens <- density(G)
sorted_kdens <- sort(kdens$y, index.return=TRUE, decreasing = TRUE)
target_dens <- sum(sorted_kdens$x) * 0.9
sum = 0
for (i in 1:length(sorted_kdens$x))
{
sum = sum + sorted_kdens$x[i]
if (sum > target_dens) {
#breakpoint = kdens$y[sorted_kdens$ix[i]]
breakpoint1 = kdens$y[sorted_kdens$ix[i-1]]
break
}
}
plot(kdens)
abline(h=breakpoint1)
breakpoint1
